from PIL import Image
from matplotlib.pyplot import imshow
import pandas
import matplotlib.pylab as plt
import os
import glob
import skillsnetwork
def show_data(data_sample, shape = (28, 28)):
    plt.imshow(data_sample[0].numpy().reshape(shape), cmap='gray')
    plt.title('y = ' + data_sample[1])
await skillsnetwork.prepare("https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DL0321EN/data/images/concrete_crack_images_for_classification.zip", path = "/resources/data", overwrite=True)
directory="/resources/data"
negative='Negative'
negative_file_path=os.path.join(directory,negative)
negative_file_path
os.listdir(negative_file_path)[0:3]
[os.path.join(negative_file_path,file) for file in  os.listdir(negative_file_path)][0:3]
print("test.jpg".endswith(".jpg"))
print("test.mpg".endswith(".jpg"))
negative_files=[os.path.join(negative_file_path,file) for file in  os.listdir(negative_file_path) if file.endswith(".jpg")]
negative_files.sort()
negative_files[0:3]
positive="Positive"
positive_file_path=os.path.join(directory,positive)
os.listdir(positive_file_path)[0:3]
[os.path.join(positive_file_path,file) for file in  os.listdir(positive_file_path)][0:3]
positive_files=[os.path.join(positive_file_path,file) for file in  os.listdir(positive_file_path) if file.endswith(".jpg")]
positive_files.sort()
positive_files[0:3]
image1 = Image.open(negative_files[0])
plt.imshow(image1)
plt.title("1st Image With No Cracks")
plt.show()
image2 = Image.open(negative_files[1])
plt.imshow(image2)
plt.title("2nd Image With No Cracks")
plt.show()
image3 = Image.open(negative_files[2])
plt.imshow(image3)
plt.title("3rd Image With No Cracks")
plt.show()
image4 = Image.open(positive_files[0])
plt.imshow(image4)
plt.title("1st Image With Cracks")
plt.show()
image5 = Image.open(positive_files[1])
plt.imshow(image5)
plt.title("2nd Image With Cracks")
plt.show()
image6 = Image.open(positive_files[2])
plt.imshow(image6)
plt.title("3rd Image With Cracks")
plt.show()
number_of_samples = len(positive_files) + len(negative_files)
Y=torch.zeros([number_of_samples])
Y=Y.type(torch.LongTensor)
Y.type()
all_files = [None] * number_of_samples
all_files[::2] = positive_files
all_files[1::2] = negative_files
all_files[:4]
for y,file in zip(Y, all_files[0:4]):
    plt.imshow(Image.open(file))
    plt.title("y="+str(y.item()))
    plt.show()
train = False
if train:
    all_files = all_files[0:30000]
    Y = Y[0:30000]
else:
    all_files = all_files[30000:]
    Y = Y[30000:]
for i in range(4):
    image = Image.open(all_files[i])
    plt.imshow(image)
    plt.title(f"Image {i+1} - Label: {Y[i].item()}")
    plt.axis('off')
    plt.show()
